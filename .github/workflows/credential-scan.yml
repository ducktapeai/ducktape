name: Credential Scanner

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  credential-scan:
    name: Scan for credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "CI Bot"
          git config --global user.email "ci-bot@example.com"

      - name: Install gitleaks
        run: |
          wget -q https://github.com/zricethezav/gitleaks/releases/latest/download/gitleaks_8.16.3_linux_x64.tar.gz
          tar -xzf gitleaks_8.16.3_linux_x64.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/

      - name: Create gitleaks config
        run: |
          cat > gitleaks.toml << 'EOL'
          title = "DuckTape Credential Scanner"
          
          [[rules]]
          id = "api-key"
          description = "API Key"
          regex = '''(?i)([a-zA-Z0-9_-]+)?(api[_-]?key|apikey|access[_-]?key|auth[_-]?key)([a-zA-Z0-9_-]+)?[=:]["']?[\w\-]{16,}["']?'''
          
          [[rules]]
          id = "zoom"
          description = "Zoom credentials"
          regex = '''(?i)(zoom[_-]?(client[_-]?id|client[_-]?secret|account[_-]?id))[=:]["']?[\w\-]{16,}["']?'''
          
          [[rules]]
          id = "openai"
          description = "OpenAI API key"
          regex = '''sk-[a-zA-Z0-9]{32,}'''
          
          [[rules]]
          id = "xai"
          description = "XAI API key"
          regex = '''xai-[a-zA-Z0-9]{20,}'''
          
          [[rules]]
          id = "generic-secret"
          description = "Generic Secret"
          regex = '''(?i)([a-zA-Z0-9_-]+)?(secret|token|password|key)([a-zA-Z0-9_-]+)?[=:]["']?[\w\-\+\/=]{16,}["']?'''
          
          [[rules]]
          id = "aws"
          description = "AWS Access Key"
          regex = '''(A3T[A-Z0-9]|AKIA|ACCA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}'''
          
          [allowlist]
          description = "Allowlist for non-sensitive paths and patterns"
          paths = [
            '''gitleaks.toml''',
            '''.github/workflows/''',
            '''.*_test.go''',
            '''.*test.rs''',
            '''.*_test.rs''',
            '''.env.example''',
            '''sensitive-patterns.txt'''
          ]
          regexes = [
            '''xai-placeholder-development-key-not-for-production-use''',
            '''dummy_key_for_testing''',
            '''your_[a-z_]*key_here''',
          ]
          EOL

      - name: Run gitleaks on HEAD
        run: |
          echo "Scanning the latest commit for credentials..."
          GITLEAKS_REPORT=$(gitleaks detect --source . --config gitleaks.toml -v)
          if [ $? -eq 1 ]; then
            echo "::error::Potential credentials found in the codebase!"
            echo "$GITLEAKS_REPORT"
            echo ""
            echo "Please check the above findings and fix any leaked credentials."
            exit 1
          else
            echo "No credentials found in the latest commit."
          fi

      - name: Scan recent commits
        if: github.event_name == 'pull_request'
        run: |
          echo "Scanning changes in this pull request..."
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          GITLEAKS_PR_REPORT=$(gitleaks detect --source . --config gitleaks.toml --log-opts="$BASE_SHA..$HEAD_SHA" -v)
          if [ $? -eq 1 ]; then
            echo "::error::Potential credentials found in this pull request!"
            echo "$GITLEAKS_PR_REPORT"
            echo ""
            echo "Please check the above findings and fix any leaked credentials."
            exit 1
          else
            echo "No credentials found in this pull request."
          fi