#!/bin/bash
#
# DuckTape pre-commit hook for credential scanning
# Install this hook with: cp hooks/pre-commit .git/hooks/ && chmod +x .git/hooks/pre-commit

set -e

echo "üîç Running pre-commit credential scan..."

# Check for potential credential patterns
STAGED_FILES=$(git diff --cached --name-only)

if [ -z "$STAGED_FILES" ]; then
    echo "No files to check."
    exit 0
fi

# Define default patterns with proper regex syntax
PATTERNS=(
    "api_key[[:blank:]]*=[[:blank:]]*[^[:space:]]{16,}"
    "secret[[:blank:]]*=[[:blank:]]*[^[:space:]]{16,}"
    "password[[:blank:]]*=[[:blank:]]*[^[:space:]]{8,}"
    "sk-[a-zA-Z0-9]{32,}"
    "xai-[a-zA-Z0-9]{20,}"
)

# Safe allowlist patterns
ALLOWLIST=(
    "xai-placeholder-development-key-not-for-production-use"
    "dummy_key_for_testing"
    "your_.*_key_here"
    "your_.*_api_key"
    "your_.*_secret"
    ".env.example"
    "sensitive-patterns.txt"
    "pre-commit"
)

VIOLATIONS_FOUND=0
for FILE in $STAGED_FILES; do
    # Skip binary files and specific file types
    if [[ -f "$FILE" ]] && [[ ! "$FILE" =~ \.(jpg|jpeg|png|gif|ico|pdf|bin)$ ]]; then
        for PATTERN in "${PATTERNS[@]}"; do
            MATCHES=$(git diff --cached --no-color "$FILE" | grep -E "^\+" | grep -v "^\+\+\+" | grep -E "$PATTERN" || true)
            
            if [ ! -z "$MATCHES" ]; then
                # Check if match is in allowlist
                ALLOWED=0
                for ALLOWITEM in "${ALLOWLIST[@]}"; do
                    if echo "$MATCHES" | grep -qE "$ALLOWITEM"; then
                        ALLOWED=1
                        break
                    fi
                done
                
                if [ $ALLOWED -eq 0 ]; then
                    echo "‚õî Potential credential found in $FILE:"
                    echo "$MATCHES" | sed 's/^+/  /'
                    VIOLATIONS_FOUND=1
                fi
            fi
        done
    fi
done

if [ $VIOLATIONS_FOUND -eq 1 ]; then
    echo "‚ùå Commit blocked due to potential credential leaks."
    echo "Please remove the sensitive data and try again."
    echo "If this is a false positive, you can bypass this check with: git commit --no-verify"
    exit 1
else
    echo "‚úÖ No credentials detected in staged files."
fi

# Run cargo fmt if available
if command -v cargo >/dev/null 2>&1; then
    if cargo fmt --version >/dev/null 2>&1; then
        echo "ü¶Ä Running cargo fmt..."
        cargo fmt --all -- --check || {
            echo "‚ùå Code formatting issues detected."
            echo "Please run 'cargo fmt' to fix formatting issues."
            exit 1
        }
    fi
fi

exit 0