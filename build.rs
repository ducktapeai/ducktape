//! Build script to ensure proper version information is available to the binary
//!
//! This script runs during the build process and ensures the version
//! from Cargo.toml is properly exposed to the application.

use std::env;
use std::fs;
use std::path::Path;

fn main() {
    // Make cargo rebuild if Cargo.toml changes
    println!("cargo:rerun-if-changed=Cargo.toml");

    // Generate a version file with the current version from Cargo.toml
    let version = env::var("CARGO_PKG_VERSION").unwrap_or_else(|_| "0.0.0".to_string());

    // Print debug information to help diagnose version issues
    println!("cargo:warning=Building DuckTape version: {}", version);

    // Create a version file
    let out_dir = env::var("OUT_DIR").expect("OUT_DIR environment variable not set");
    let dest_path = Path::new(&out_dir).join("version.rs");

    // Write version information to a file that can be included
    fs::write(
        &dest_path,
        format!(
            "/// This file is automatically generated by build.rs
/// Do not modify this file directly

/// The current version of the DuckTape application
pub const VERSION: &str = \"{}\";

#[cfg(test)]
mod tests {{
    use super::*;
    
    #[test]
    fn test_version_matches_cargo_toml() {{
        // This test ensures the version matches what's in Cargo.toml
        assert_eq!(VERSION, env!(\"CARGO_PKG_VERSION\"));
    }}
}}
",
            version
        ),
    )
    .expect("Failed to write version file");

    // Add a simple static version file that can be directly included for debugging
    let workspace_dir = env::var("CARGO_MANIFEST_DIR").expect("CARGO_MANIFEST_DIR not set");
    let static_version_path = Path::new(&workspace_dir).join("src").join("static_version.rs");

    fs::write(
        &static_version_path,
        format!(
            "// This file is automatically generated by build.rs
// Do not modify this file directly

/// The current version of the DuckTape application (static reference)
pub const STATIC_VERSION: &str = \"{}\";
",
            version
        ),
    )
    .expect("Failed to write static version file");
}
